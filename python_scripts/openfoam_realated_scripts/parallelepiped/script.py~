######################################################
# BlockMeshDict Generator for Parallelepiped Objects #
######################################################
import numpy as np

# getting user inputs
tmp1,tmp2,tmp3 = input("Enter minimum corner coordinates : Xmin, Ymin, Zmin : ").split(",")
Xmin = float(tmp1); Ymin = float(tmp2); Zmin = float(tmp3)

tmp1,tmp2,tmp3 = input("Enter maximum corner coordinates : Xmin, Ymin, Zmin : ").split(",")
Xmax = float(tmp1); Ymax = float(tmp2); Zmax = float(tmp3)

# creating coordinates of the parallelepiped object
c0 = np.array([Xmin, Ymin, Zmin])
c1 = np.array([Xmin, Ymin, Zmax])
c2 = np.array([Xmax, Ymin, Zmax])
c3 = np.array([Xmax, Ymin, Zmin])
c4 = np.array([Xmin, Ymax, Zmin])
c5 = np.array([Xmin, Ymax, Zmax])
c6 = np.array([Xmax, Ymax, Zmax])
c7 = np.array([Xmax, Ymax, Zmin])

# creating blockMeshDict file
fid = open("blockMeshDict","w")
fid.writelines("/*--------------------------------*- C++ -*----------------------------------*\\n")
fid.writelines("  =========                 |\n")
fid.writelines("  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox\n")
fid.writelines("   \\    /   O peration     | Website:  https://openfoam.org\n")
fid.writelines("    \\  /    A nd           | Version:  6\n")
fid.writelines("     \\/     M anipulation  |\n")
fid.writelines("\*---------------------------------------------------------------------------*/\n")
fid.writelines("FoamFile\n")
fid.writelines("{\n")
fid.writelines("    version     2.0;\n")
fid.writelines("    format      ascii;\n")
fid.writelines("    class       dictionary;\n")
fid.writelines("    object      blockMeshDict;\n")
fid.writelines("}\n")
fid.writelines("\n")
fid.writelines("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n")
fid.writelines("\n")
fid.writelines("\n")
fid.writelines("convertToMeters 1;\n")
fid.writelines("\n")
fid.writelines("vertices\n")
fid.writelines("(\n")
fid.writelines("    ("+str(c0[0])+" "+str(c0[1])+" "+str(c0[2])+" ) // 0\n")
fid.writelines("    ("+str(c1[0])+" "+str(c1[1])+" "+str(c1[2])+" ) // 1\n")
fid.writelines("    ("+str(c2[0])+" "+str(c2[1])+" "+str(c2[2])+" ) // 2\n")
fid.writelines("    ("+str(c3[0])+" "+str(c3[1])+" "+str(c3[2])+" ) // 3\n")
fid.writelines("    ("+str(c4[0])+" "+str(c4[1])+" "+str(c4[2])+" ) // 4\n")
fid.writelines("    ("+str(c5[0])+" "+str(c5[1])+" "+str(c5[2])+" ) // 5\n")
fid.writelines("    ("+str(c6[0])+" "+str(c6[1])+" "+str(c6[2])+" ) // 6\n")
fid.writelines("    ("+str(c7[0])+" "+str(c7[1])+" "+str(c7[2])+" ) // 7\n")
fid.writelines(");\n")
fid.writelines("\n")
fid.writelines("blocks\n")
fid.writelines("(\n")
fid.writelines(" hex (0 1 2 3 4 5 6 7) (10 10 10) simpleGrading (1 1 1)\n")
fid.writelines(" \n")
fid.writelines(");\n")
fid.writelines("\n")
fid.writelines("edges\n")
fid.writelines("(\n")
fid.writelines(");\n")
fid.writelines("\n")
fid.writelines("boundary\n")
fid.writelines("(\n")
fid.writelines("    \n")
fid.writelines("    inlet\n")
fid.writelines("    {\n")
fid.writelines("        type patch;\n")
fid.writelines("        faces\n")
fid.writelines("        (\n")
fid.writelines("            (0 1 2 3)\n")
fid.writelines("        );\n")
fid.writelines("    }\n")
fid.writelines("    outlet\n")
fid.writelines("    {\n")
fid.writelines("        type patch;\n")
fid.writelines("        faces\n")
fid.writelines("        (\n")
fid.writelines("            (4 5 6 7)\n")
fid.writelines("        );\n")
fid.writelines("    }\n")
fid.writelines("    walls\n")
fid.writelines("    {\n")
fid.writelines("        type wall;\n")
fid.writelines("        faces\n")
fid.writelines("        (\n")
fid.writelines("            (1 2 6 5)\n")
fid.writelines("            (2 6 7 3)\n")
fid.writelines("            (3 0 4 7)\n")
fid.writelines("            (0 1 5 4)\n")
fid.writelines("        );\n")
fid.writelines("    }\n")
fid.writelines(");\n")
fid.writelines("\n")
fid.writelines("// ************************************************************************* //\n")
fid.close()

print("\n Block Mesh dictionary is successfuly written")

